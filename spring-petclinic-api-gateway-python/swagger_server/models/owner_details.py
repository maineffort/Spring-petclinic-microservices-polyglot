# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.pet_details import PetDetails  # noqa: F401,E501
from swagger_server import util


class OwnerDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city: str=None, first_name: str=None, id: int=None, last_name: str=None, pets: List[PetDetails]=None, telephone: str=None):  # noqa: E501
        """OwnerDetails - a model defined in Swagger

        :param address: The address of this OwnerDetails.  # noqa: E501
        :type address: str
        :param city: The city of this OwnerDetails.  # noqa: E501
        :type city: str
        :param first_name: The first_name of this OwnerDetails.  # noqa: E501
        :type first_name: str
        :param id: The id of this OwnerDetails.  # noqa: E501
        :type id: int
        :param last_name: The last_name of this OwnerDetails.  # noqa: E501
        :type last_name: str
        :param pets: The pets of this OwnerDetails.  # noqa: E501
        :type pets: List[PetDetails]
        :param telephone: The telephone of this OwnerDetails.  # noqa: E501
        :type telephone: str
        """
        self.swagger_types = {
            'address': str,
            'city': str,
            'first_name': str,
            'id': int,
            'last_name': str,
            'pets': List[PetDetails],
            'telephone': str
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'pets': 'pets',
            'telephone': 'telephone'
        }

        self._address = address
        self._city = city
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._pets = pets
        self._telephone = telephone

    @classmethod
    def from_dict(cls, dikt) -> 'OwnerDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OwnerDetails of this OwnerDetails.  # noqa: E501
        :rtype: OwnerDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> str:
        """Gets the address of this OwnerDetails.


        :return: The address of this OwnerDetails.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this OwnerDetails.


        :param address: The address of this OwnerDetails.
        :type address: str
        """

        self._address = address

    @property
    def city(self) -> str:
        """Gets the city of this OwnerDetails.


        :return: The city of this OwnerDetails.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this OwnerDetails.


        :param city: The city of this OwnerDetails.
        :type city: str
        """

        self._city = city

    @property
    def first_name(self) -> str:
        """Gets the first_name of this OwnerDetails.


        :return: The first_name of this OwnerDetails.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this OwnerDetails.


        :param first_name: The first_name of this OwnerDetails.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self) -> int:
        """Gets the id of this OwnerDetails.


        :return: The id of this OwnerDetails.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this OwnerDetails.


        :param id: The id of this OwnerDetails.
        :type id: int
        """

        self._id = id

    @property
    def last_name(self) -> str:
        """Gets the last_name of this OwnerDetails.


        :return: The last_name of this OwnerDetails.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this OwnerDetails.


        :param last_name: The last_name of this OwnerDetails.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def pets(self) -> List[PetDetails]:
        """Gets the pets of this OwnerDetails.


        :return: The pets of this OwnerDetails.
        :rtype: List[PetDetails]
        """
        return self._pets

    @pets.setter
    def pets(self, pets: List[PetDetails]):
        """Sets the pets of this OwnerDetails.


        :param pets: The pets of this OwnerDetails.
        :type pets: List[PetDetails]
        """

        self._pets = pets

    @property
    def telephone(self) -> str:
        """Gets the telephone of this OwnerDetails.


        :return: The telephone of this OwnerDetails.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone: str):
        """Sets the telephone of this OwnerDetails.


        :param telephone: The telephone of this OwnerDetails.
        :type telephone: str
        """

        self._telephone = telephone
